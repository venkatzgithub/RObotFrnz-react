{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","components/ErrorBoundry.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","Component","onsearchChange","event","console","log","target","value","setState","state","fetch","then","Response","json","users","this","filtered","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kNAkBeA,EAfF,SAACC,GACV,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,OAAOC,IAAG,+BAA0BH,EAAMI,GAAhC,cACnB,6BACI,4BAAKJ,EAAMI,IACX,2BAAIJ,EAAMK,SCUXC,EAfE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAQ,kBAAC,EAAD,CAAMC,IAAKD,EAAGN,GAAIG,EAAOG,GAAGN,GAAIC,KAAME,EAAOG,GAAGL,YCI7DO,EAXG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAE5B,OACI,yBAAKb,UAAU,2BACZ,2BAAOc,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCMvDI,G,MAVA,SAAClB,GACZ,OACI,yBAAMmB,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC5DtB,EAAMuB,YC4CJC,GChDYC,Y,kDDM3B,aAAc,IAAD,8BACT,gBAaJC,eAAe,SAACC,GAChBC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACnB,YAAYc,EAAMG,OAAOC,SAdpC,EAAKE,MAAM,CACP1B,OAAO,GACPM,YAAY,IAJP,E,gEAOO,IAAD,OACfqB,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACtEF,MAAK,SAAAG,GAAK,OACR,EAAKN,SAAS,CAACzB,OAAO+B,S,+BASzB,IAAD,EACmBC,KAAKN,MAAzBpB,EADC,EACDA,YAAYN,EADX,EACWA,OAEbiC,EAAUjC,EAAOkC,QAAO,SAAAC,GAC1B,OAAOA,EAAMrC,KAAKsC,cAAcC,SAAS/B,EAAY8B,kBAEzD,OAAQpC,EAAOsC,OAKN,yBAAK5C,UAAU,MACZ,wBAAIA,UAAU,MAAd,aACD,kBAAC,EAAD,CAAWa,aAAcyB,KAAKb,iBACnC,kBAAC,EAAD,UAAU,kBAAC,EAAD,CAAUnB,OAAQiC,MAN9B,8C,GA5Bcf,c,MEKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.7725810e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-s\">\r\n            <img alt=\"test\" src={`https://robohash.org/${props.id}?200x200`} />\r\n            <div>\r\n                <h2>{props.id}</h2>\r\n                <p>{props.name}</p>\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (<Card key={i} id={robots[i].id} name={robots[i].name} />);\r\n                })\r\n            }\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n\r\n    return (\r\n        <div className=\"bg-light-green dib br3 \">\r\n           <input type=\"search\" placeholder=\"search robots\" onChange={searchChange}></input>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div  style={{overflowY:\"scroll\",border:\"3px solid black\",height:\"500px\"}}>\r\n            {props.children}\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\n\r\nimport SearchBox from '../components/SearchBox';\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\nclass App extends Component {\r\nconstructor(){\r\n    super()\r\n    this.state={\r\n        robots:[],\r\n        searchfield:\"\"\r\n    }\r\n}\r\ncomponentDidMount(){\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(Response=>Response.json()\r\n        ).then(users=>\r\n            this.setState({robots:users})\r\n        )\r\n\r\n}\r\nonsearchChange=(event)=>{\r\nconsole.log(event.target.value);\r\nthis.setState({searchfield:event.target.value});\r\n\r\n}\r\nrender(){\r\nconst {searchfield,robots}=this.state;\r\n\r\nconst filtered= robots.filter(robot=>{\r\n    return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n});\r\nreturn !robots.length ?\r\n\r\n    <h1>Loading...</h1>:\r\n\r\n    \r\n        (<div className=\"tc\">\r\n            <h1 className=\"f2\">RObo Frnz</h1>\r\n           <SearchBox searchChange={this.onsearchChange}></SearchBox> \r\n      <Scroll>  <CardList robots={filtered}></CardList></Scroll>    \r\n        </div> );\r\n\r\n\r\n   \r\n\r\n\r\n}\r\n}\r\nexport default App;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\nconstructor(){\r\n    super()\r\n    this.state={\r\n        error:false\r\n    }\r\n}\r\ncomponentDidCatch(){\r\nthis.setState({error:true})\r\n\r\n}\r\n\r\nrender(){\r\n    if(this.state.error)\r\n    {\r\n        return <h1>Oopz Gommenasai</h1>\r\n    }\r\n\r\n}\r\n}\r\nexport default ErrorBoundry;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App';\nimport \"tachyons\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n   <App></App>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}